// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userCode             Int         @id @default(autoincrement()) @map("userCode")
  username            String      @map("username")
  userId            String      @unique @map("userId")
  password            String      @map("password")
  createdAt           DateTime    @default(now()) @map("createdAt")
  updatedAt           DateTime    @updatedAt @map("updatedAt")


  // Users-Characters 1:N 관계
  characters          Characters[]

  @@map("Users")
}

model Characters {
  characterCode          Int             @id @default(autoincrement()) @map("characterCode")
  userCode               Int             @map("userCode")
  characterName        String          @unique @map("characterName")
  characterType        CharacterType   @map("characterType")
  createdAt             DateTime        @default(now()) @map("createdAt")
  updatedAt             DateTime        @updatedAt @map("updatedAt")


  // Users-Characters 1:N 관계
  user    Users   @relation(fields: [userCode], references: [userCode], onDelete: Cascade)

  // Characters-CharacterStats 1:1 관계
  characterStats    CharacterStats?
  // Characters-Inventory 1:1 관계
  inventory    Inventory?


  @@map("Characters")
}

model CharacterStats {
  statCode               Int         @id @default(autoincrement()) @map("statCode")
  characterCode          Int         @unique @map("characterCode")
  hp                    Int         @map("hp")
  mp                    Int         @map("mp")
  level                 Int         @map("level")
  attack                Int         @map("attack")
  defense               Int         @map("defense")

  // Characters-CharacterStats 1:1 관계
  character    Characters   @relation(fields: [characterCode], references: [characterCode], onDelete: Cascade)

  @@map("CharacterStats")
}


// Inventory: 유저-캐릭터에 1대1 할당된 인벤토리.
model Inventory {
  inventoryCode          Int         @id @default(autoincrement()) @map("inventoryCode")
  characterCode          Int         @unique @map("characterCode")
  gold                  Int         @default(10000) @map("gold")
  // Inventory-InventoryItems 1:N 관계
  inventoryItems   InventoryItems[]

  // Characters-Inventory 1:1 관계
  character    Characters   @relation(fields: [characterCode], references: [characterCode], onDelete: Cascade)



  @@map("Inventory")
}

// 데이터 모델로서의 아이템
model Items {
  itemCode         Int          @id @default(autoincrement()) @map("itemCode")
  itemName       String       @unique @map("itemName")
  itemPrice      Int          @map("itemPrice") 
  itemRarity     Rarity       @map("itemRarity") 
  itemStat       Json         @map("itemStat")

  canBeMerged     Boolean      @map("canBeMerged")
  itemType       ItemType     @map("itemType")
  equipSlot      EquipSlot?   @map("equipSlot")

  @@map("Items")
}

model InventoryItems {
  inventoryitemCode      Int         @id @default(autoincrement()) @map("inventoryitemCode")
  inventoryCode          Int         @map("inventoryCode")
  itemCode               Int         @map("itemCode")
  itemName             String      @map("itemName")
  itemQuantity         Int         @map("itemQuantity")

  equippedOn            EquipSlot?  @map("equippedOn")

  canBeMerged           Boolean     @map("canBeMerged")


  // Inventory-InventoryItems 1:N 관계
  inventory   Inventory   @relation(fields: [inventoryCode], references: [inventoryCode], onDelete: Cascade)

  @@map("InventoryItems")  
}


// enum 열거형 캐릭터 직업, 희귀도
enum CharacterType {
  Warrior
  Rogue
  Druid
  Warlock
  Hunter
}

enum Rarity {
  Common
  Rare
  Epic
  Legendary
  Mythic
}

enum ItemType {
  Weapon
  Armor
  Expendable
  Material
}

enum EquipSlot {
  Head
  Body
  Arm
  Leg
  Hand
  Feet
  Weapon
}