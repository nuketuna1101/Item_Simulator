// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id             Int         @id @default(autoincrement()) @map("user_id")
  username            String      @map("username")
  nickname            String      @unique @map("nickname")
  password            String      @map("password")
  createdAt           DateTime    @default(now()) @map("createdAt")
  updatedAt           DateTime    @updatedAt @map("updatedAt")


  // Users-Characters 1:N 관계
  characters          Characters[]

  @@map("Users")
}

model Characters {
  character_id          Int             @id @default(autoincrement()) @map("character_id")
  user_id               Int             @map("user_id")
  character_name        String          @unique @map("character_name")
  character_type        CharacterType   @map("character_type")
  createdAt             DateTime        @default(now()) @map("createdAt")
  updatedAt             DateTime        @updatedAt @map("updatedAt")


  // Users-Characters 1:N 관계
  user    Users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  // Characters-CharacterStats 1:1 관계
  characterStats    CharacterStats?
  // Characters-Inventory 1:1 관계
  inventory    Inventory?


  @@map("Characters")
}

model CharacterStats {
  stat_id               Int         @id @default(autoincrement()) @map("stat_id")
  character_id          Int         @unique @map("character_id")
  hp                    Int         @map("hp")
  mp                    Int         @map("mp")
  level                 Int         @map("level")
  attack                Int         @map("attack")
  defense               Int         @map("defense")

  // Characters-CharacterStats 1:1 관계
  character    Characters   @relation(fields: [character_id], references: [character_id], onDelete: Cascade)

  @@map("CharacterStats")
}


// Inventory: 유저-캐릭터에 1대1 할당된 인벤토리.
model Inventory {
  inventory_id          Int         @id @default(autoincrement()) @map("inventory_id")
  character_id          Int         @unique @map("character_id")
  // Inventory-InventoryItems 1:N 관계
  inventoryItems   InventoryItems[]

  // Characters-Inventory 1:1 관계
  character    Characters   @relation(fields: [character_id], references: [character_id], onDelete: Cascade)



  @@map("Inventory")
}

// 데이터 모델로서의 아이템
model Items {
  item_id          Int          @id @default(autoincrement()) @map("item_id")
  item_name        String       @unique @map("item_name")
  item_price       Int          @map("item_price") 
  item_rarity      Rarity       @map("item_rarity") 
  item_stat        Json         @map("item_stat")

  @@map("Items")
}

model InventoryItems {
  inventoryItem_id      Int         @id @default(autoincrement()) @map("inventoryItem_id")
  inventory_id          Int         @map("inventory_id")
  item_id               Int         @map("item_id")
  isEquipped            Boolean     @map("isEquipped")
  item_quantity         Int         @map("item_quantity")

  // Inventory-InventoryItems 1:N 관계
  inventory   Inventory   @relation(fields: [inventory_id], references: [inventory_id], onDelete: Cascade)

  @@map("InventoryItems")  
}


// enum 열거형 캐릭터 직업, 희귀도
enum CharacterType {
  Warrior
  Rougue
  Druid
  Warlock
  Hunter
}

enum Rarity {
  Common
  Rare
  Epic
  Legendary
  Mythic
}